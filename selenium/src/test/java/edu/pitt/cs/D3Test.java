package edu.pitt.cs;
// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import org.junit.FixMethodOrder;
import org.junit.runners.MethodSorters;
import static org.junit.Assert.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.time.Duration;
import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.Matchers.empty;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class D3Test {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  
  @Before
  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  
  @After
  public void tearDown() {
    driver.quit();
  }
  
  @Test
  public void tEST1LINKS() {
    // Test name: TEST-1-LINKS
    // Step # | name | target | value
    // 1 | open | / | 
    driver.get("https://cs1632.appspot.com/");
    // 2 | runScript | document.cookie = "1=false";document.cookie = "2=false";document.cookie = "3=false"; | 
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    // 3 | setWindowSize | 1376x816 | 
    driver.manage().window().setSize(new Dimension(1376, 816));
    // 4 | waitForElementVisible | linkText=Reset | 30000
    {
      WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(30));
      wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText("Reset")));
    }
    // 5 | assert | link=Reset | href="/reset"
    assertThat(driver.findElement(By.linkText("Reset")).getAttribute("href"), is("https://cs1632.appspot.com/reset"));
  }
  
  @Test
  public void tEST2RESET() {
    // Test name: TEST-2-RESET
    // Step # | name | target | value
    // 1 | open | / | 
    driver.get("https://cs1632.appspot.com/");
    // 2 | runScript | document.cookie = "1=false";document.cookie = "2=false";document.cookie = "3=false"; | 
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    // 3 | setWindowSize | 1376x816 | 
    driver.manage().window().setSize(new Dimension(1376, 816));
    // 4 | click | linkText=Rent-A-Cat | 
    driver.findElement(By.linkText("Rent-A-Cat")).click();
    // 5 | click | id=rentID | 
    driver.findElement(By.id("rentID")).click();
    // 6 | type | id=rentID | 1
    driver.findElement(By.id("rentID")).sendKeys("1");
    // 7 | click | css=.form-group:nth-child(3) .btn | 
    driver.findElement(By.cssSelector(".form-group:nth-child(3) .btn")).click();
    // 8 | click | id=rentID | 
    driver.findElement(By.id("rentID")).click();
    // 9 | type | id=rentID | 2
    driver.findElement(By.id("rentID")).sendKeys("2");
    // 10 | click | css=.form-group:nth-child(3) .btn | 
    driver.findElement(By.cssSelector(".form-group:nth-child(3) .btn")).click();
    // 11 | click | id=rentID | 
    driver.findElement(By.id("rentID")).click();
    // 12 | type | id=rentID | 3
    driver.findElement(By.id("rentID")).sendKeys("3");
    // 13 | click | css=.form-group:nth-child(3) .btn | 
    driver.findElement(By.cssSelector(".form-group:nth-child(3) .btn")).click();
    // 14 | click | linkText=Reset | 
    driver.findElement(By.linkText("Reset")).click();
    // 15 | waitForElementVisible | css=.jumbotron | 30000
    {
      WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(30));
      wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(".jumbotron")));
    }
    // 16 | assertText | id=cat-id1 | ID 1. Jennyanydots
    assertThat(driver.findElement(By.id("cat-id1")).getText(), is("ID 1. Jennyanydots"));
    // 17 | assertText | id=cat-id2 | ID 2. Old Deuteronomy
    assertThat(driver.findElement(By.id("cat-id2")).getText(), is("ID 2. Old Deuteronomy"));
    // 18 | assertText | id=cat-id3 | ID 3. Mistoffelees
    assertThat(driver.findElement(By.id("cat-id3")).getText(), is("ID 3. Mistoffelees"));
  }
  
  @Test
  public void tEST3CATALOG() {
    // Test name: TEST-3-CATALOG
    // Step # | name | target | value
    // 1 | open | / | 
    driver.get("https://cs1632.appspot.com/");
    // 2 | runScript | document.cookie = "1=false";document.cookie = "2=false";document.cookie = "3=false"; | 
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    // 3 | setWindowSize | 1376x816 | 
    driver.manage().window().setSize(new Dimension(1376, 816));
    // 4 | click | linkText=Catalog | 
    driver.findElement(By.linkText("Catalog")).click();
    // 5 | waitForElementVisible | css=li:nth-child(3) > img | 30000
    {
      WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(30));
      wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("li:nth-child(3) > img")));
    }
    // 6 | assert | xpath=(//img)[2] | src="/images/cat2.jpg"
    assertThat(driver.findElement(By.xpath("(//img)[2]")).getAttribute("src"), is("https://cs1632.appspot.com/images/cat2.jpg"));
  }
  
  @Test
  public void tEST4LISTING() {
    driver.get("https://cs1632.appspot.com/");
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    driver.manage().window().setSize(new Dimension(909, 816));
    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
    wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(".jumbotron")));
    // Debug print of the listing HTML
    System.out.println(driver.findElement(By.id("listing")).getAttribute("innerHTML"));
    // Wait for exactly 3 <li> elements in the ul
    wait.until(ExpectedConditions.numberOfElementsToBe(By.cssSelector("#listing ul li"), 3));
    List<WebElement> cats = driver.findElements(By.cssSelector("#listing ul li"));
    assertThat(cats.size(), is(3));
    assertThat(cats.get(0).getText(), containsString("ID 1. Jennyanydots"));
    assertThat(cats.get(1).getText(), containsString("ID 2. Old Deuteronomy"));
    assertThat(cats.get(2).getText(), containsString("ID 3. Mistoffelees"));
  }

  @Test
  public void tEST5RENTACAT() {
    // Test name: TEST-5-RENT-A-CAT
    driver.get("https://cs1632.appspot.com/");
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    driver.findElement(By.linkText("Rent-A-Cat")).click();
    // Check for Rent button
    assertThat(driver.findElements(By.xpath("//button[contains(text(),'Rent')]")), not(empty()));
    // Check for Return button
    assertThat(driver.findElements(By.xpath("//button[contains(text(),'Return')]")), not(empty()));
  }

  @Test
  public void tEST6RENT() {
    // Test name: TEST-6-RENT
    driver.get("https://cs1632.appspot.com/");
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    driver.findElement(By.linkText("Rent-A-Cat")).click();
    // Enter "1" into the input box for the rented cat ID
    WebElement rentInput = driver.findElement(By.id("rentID"));
    rentInput.clear();
    rentInput.sendKeys("1");
    // Press the "Rent" button
    driver.findElement(By.xpath("//button[contains(text(),'Rent')]"))
          .click();
    // Wait for any <li> to contain "Rented out"
    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
    wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//li[contains(text(),'Rented out')]")));
    // Wait for exactly 3 <li> elements in the ul
    wait.until(ExpectedConditions.numberOfElementsToBe(By.cssSelector("#listing ul li"), 3));
    List<WebElement> cats = driver.findElements(By.cssSelector("#listing ul li"));
    assertThat(cats.size(), is(3));
    assertThat(cats.get(0).getText(), containsString("Rented out"));
    assertThat(cats.get(1).getText(), containsString("ID 2. Old Deuteronomy"));
    assertThat(cats.get(2).getText(), containsString("ID 3. Mistoffelees"));
    // Check for Success! message
    assertThat(driver.findElement(By.id("rentResult")).getText(), containsString("Success!"));
  }
  
  @Test
  public void tEST7RETURN() {
    driver.get("https://cs1632.appspot.com/");
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    driver.manage().window().setSize(new Dimension(783, 816));
    driver.findElement(By.linkText("Rent-A-Cat")).click();
    driver.findElement(By.id("rentID")).click();
    driver.findElement(By.id("rentID")).sendKeys("1");
    driver.findElement(By.cssSelector(".form-group:nth-child(3) .btn")).click();
    assertThat(driver.findElement(By.xpath("//div/ul/li")).getText(), is("Rented out"));
    assertThat(driver.findElement(By.xpath("//div[@id=\'rentResult\']")).getText(), is("Success!"));
    assertThat(driver.findElement(By.xpath("//div/ul/li[2]")).getText(), is("ID 2. Old Deuteronomy"));
    assertThat(driver.findElement(By.xpath("//div/ul/li[3]")).getText(), is("ID 3. Mistoffelees"));
  }
  @Test
  public void tEST8FEEDACAT() {
    driver.get("https://cs1632.appspot.com/");
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    driver.manage().window().setSize(new Dimension(783, 816));
    driver.findElement(By.linkText("Feed-A-Cat")).click();
    {
      List<WebElement> elements = driver.findElements(By.xpath("//button"));
      assert(elements.size() > 0);
    }
  }
  @Test
  public void tEST9FEED() {
    driver.get("https://cs1632.appspot.com/");
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    driver.manage().window().setSize(new Dimension(784, 816));
    driver.findElement(By.linkText("Feed-A-Cat")).click();
    driver.findElement(By.id("catnips")).click();
    driver.findElement(By.id("catnips")).sendKeys("6");
    driver.findElement(By.cssSelector(".btn")).click();
    {
      List<WebElement> elements = driver.findElements(By.xpath("//div[4]"));
      assert(elements.size() > 0);
    }
  }

  @Test
  public void tEST10GREETACAT() {
    // Test name: TEST-10-GREET-A-CAT
    driver.get("https://cs1632.appspot.com/");
    driver.findElement(By.linkText("Greet-A-Cat")).click();
    String pageText = driver.findElement(By.tagName("body")).getText();
    assertTrue(pageText.contains("Meow!Meow!Meow!"));
  }

  @Test
  public void tEST11GREETACATWITHNAME() {
    // Test name: TEST-11-GREET-A-CAT-WITH-NAME
    driver.get("https://cs1632.appspot.com/greet-a-cat/Jennyanydots");
    String pageText = driver.findElement(By.tagName("body")).getText();
    assertTrue(pageText.contains("Meow! from Jennyanydots."));
  }
} 